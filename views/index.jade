extends layout

block header-scripts
    script(type='text/javascript', src='/javascripts/d3.min.js')
    script(type='text/javascript', src='/javascripts/crossfilter.min.js')
    script(type='text/javascript', src='/javascripts/dc.min.js')
    script(type='text/javascript', src='/javascripts/graph.utils.js')

block content
  h1= title
  p Welcome to our visualization using Node, D3.js, Jade & Stylus

  #dropdown
      button.dropButton(onclick="myFunction()") Load dataset
      #datasetDropdown.dropContent
          a(href="#", onclick="loadDataset('simpleDemo')") Simple Demo
          a(href="#", onclick="loadDataset('randomSet')") Random Set
          a(href="#", onclick="loadDataset('miserables')") Mis√©rables

  #d3-visualisation

block body-scripts
  script(type='text/javascript').

      var width = 1000;
      var height = 500;
      var linkedByIndex = {};
      var nodes, links, force, svg, link, path;

      var myFunction = function() {
          document.getElementById("datasetDropdown").classList.toggle("show");
      };

      var loadDataset = function(filename) {
          console.log("LOADING DATASET: " + filename);
          setupGraph(filename);
      };

      window.onclick = function (event) {
          if (!event.target.matches('.dropButton')) {
              var dropdowns = document.getElementsByClassName("dropContent");
              var i;
              for (i = 0; i < dropdowns.length; i++) {
                  var openDropdown = dropdowns[i];
                  if (openDropdown.classList.contains('show')) {
                      openDropdown.classList.remove('show');
                  }
              }
          }
      };

      function setupGraph(filename) {

          var filepath = "/json/" + filename + ".json";

          d3.select("svg").remove();
          d3.json(filepath, function (error, data) {
              if (error) throw error;

              nodes = data.nodes;
              links = data.links;

              links.forEach(function (link) {
                  linkedByIndex[link.source + "," + link.target] = true;
                  link.source = nodes[link.source] || (nodes[link.source] = {name: link.source}) || (nodes[link.source] = {id: link.source});
                  link.target = nodes[link.target] || (nodes[link.target] = {name: link.target}) || (nodes[link.target] = {id: link.target});
                  link.value = +link.value;
              });

              force = d3.layout.force()
                      .nodes(d3.values(nodes))
                      .links(links)
                      .charge(-300)
                      //.charge(-3000)
                      //.friction(0.6)
                      //.gravity(0.6)
                      .linkDistance(60)
                      .size([width, height])
                      .on("tick", tick)
                      .start();

              svg = d3.select("#d3-visualisation").append("svg")
                      .attr("width", width)
                      .attr("height", height);

              svg
                      .append("svg:defs")
                      .selectAll("marker")
                      .data(["end"])
                      .enter().append("svg:marker")
                      .attr("id", String)
                      .attr("viewBox", "0 -5 10 10")
                      .attr("refX", 15)
                      .attr("refY", -1.5)
                      .attr("markerWidth", 6)
                      .attr("markerHeight", 6)
                      .attr("orient", "auto")
                      .append("svg:path")
                      .attr("d", "M0,-5L10,0L0,5");

              path = svg.append("svg:g")
                      .selectAll("path")
                      .data(force.links())
                      .enter().append("svg:path")
                      .attr("class", "link")
                      .attr("marker-end", "url()");

              node = svg.selectAll(".node")
                      .data(force.nodes())
                      .enter().append("g")
                      .attr("class", "node")
                      .call(force.drag);

              node
                      .append("circle")
                      .attr("r", node_radius)
                      .on("mouseover", mouseOverFunction)
                      .on("mouseout", mouseOutFunction);

              node
                      .append("text")
                      .attr("x", 12)
                      .attr("dy", ".35em")
                      .text(function (d) {
                          return d.name;
                      });

              function tick() {
                  path
                          .attr("d", function (d) {
                              var dx = d.target.x - d.source.x, dy = d.target.y - d.source.y, dr = Math.sqrt(dx * dx + dy * dy);
                              return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
                          });

                  node
                          .attr("transform", function (d) {
                              return "translate(" + d.x + "," + d.y + ")";
                          });
              }

              // Export it using console command 'node index.js > out.svg'
              if (typeof module !== 'undefined' && module.exports) {
                  module.exports = svg;
              }
          });
      }