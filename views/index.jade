extends layout

block header-scripts

block content
    .container-fluid

        #menu.col-md-4
            #intro.col-md-12
                h1 #{title}
                p Welcome to our visualization using Node, D3.js, Jade & Stylus
                .spacer

            #dropdown.col-md-12

                #datasetButton.col-md-8
                    button(onclick="displayDropdown()").deepshadow.dropButton.dropdownActuator
                        | Currently displaying #[span#datasetName.dropdownActuator REPLACE ME]
                        | <br/><br/>
                        | Available data-sets #[span(aria-hidden="true").glyphicon.glyphicon-triangle-bottom.dropdownActuator]
                    #datasetDropdown.col-md-10.dropContent
                        a(href="#", onclick="loadDataset('SimpleDemo')") Simple Demo
                        a(href="#", onclick="loadDataset('RandomSet')") Random Set
                        a(href="#", onclick="loadDataset('Miserables')") Mis√©rables
                    .spacer

                #settingsButton.col-md-4
                    button(onclick="toggleSettings()").deepshadow.dropButton.dropdownActuator Settings #[span(aria-hidden="true").fa.fa-cog]

            #customizationMenu(style="display:none;").col-md-12
                #customizationContainer.container
                    .col-lg-5.col-md-5.col-sm-8.col-xs-9.tabContainer
                        .col-lg-3.col-md-3.col-sm-3.col-xs-3.tabMenu
                            .list-group
                                a(href="#").list-group-item.text-center.active
                                    h4.h4-smaller #[span(aria-hidden="true").fa.fa-lg.fa-circle]<br/><br/>Nodes
                                a(href="#").list-group-item.text-center
                                    h4.h4-smaller #[span(aria-hidden="true").fa.fa-lg.fa-code-fork]<br/><br/>Edges
                                a(href="#").list-group-item.text-center
                                    h4.h4-smaller #[span(aria-hidden="true").fa.fa-lg.fa-magnet]<br/><br/>Force Layout
                                a(href="#").list-group-item.text-center
                                    h4.h4-smaller #[span(aria-hidden="true").fa.fa-lg.fa-question]<br/><br/>Category
                        .col-lg-9.col-md-9.col-sm-9.col-xs-9.customTab
                            .tabContent.slider.active
                                h4.great Node size multiplier
                                .col-sm-12.sliderBar
                                    #nodeSize
                            .tabContent.slider
                                h4.great Edge length
                                .col-sm-12.sliderBar
                                    #edgeLength
                                .spacer
                                h4.great Edge strength
                                .col-sm-12.sliderBar
                                    #edgeStrength
                            .tabContent.slider
                                h4.great Force layout charge
                                .col-sm-12.sliderBar
                                    #forceCharge

        #d3-container.col-md-8
            #d3-visualisation

block body-scripts
    script(type='text/javascript', src='/javascripts/d3.min.js')
    script(type='text/javascript', src='/javascripts/crossfilter.min.js')
    script(type='text/javascript', src='/javascripts/dc.min.js')
    script(type='text/javascript', src='/javascripts/jquery-1.9.1.min.js')
    script(type='text/javascript', src='/javascripts/jqueryUI-1.10.4.min.js')
    script(type='text/javascript', src='/javascripts/bootstrap-3.3.6.min.js')
    script(type='text/javascript', src='/javascripts/graph.utils.js')

    script(type='text/javascript').

        /*==========================================================================================*/
        /*                                      CORE VARIABLES                                      */
        /*==========================================================================================*/

        var height = $(window).height() * 0.9;
        var width = $(window).width() * 0.6;

        var root, nodes, links, force, forceLabels, svg, link, path, brush, shiftKey, datasetName, linkedByIndex, superNodesIndexes;

        var radiusMultiplier = 1;
        var linkDistance = 60;
        var linkStrength = 1;
        var forceCharge = 60;

        /*==========================================================================================*/
        /*                                       DROPDOWN MENU                                      */
        /*==========================================================================================*/

        // Function used to display dropdown menu
        function displayDropdown() {
            document.getElementById("datasetDropdown").classList.toggle("show");
        }

        // Function used to load specified dataset (json formatted using D3 rev3 syntax)
        function loadDataset(filename) {
            $('#datasetName').html(filename);
            setupGraph(filename);
        }

        // Function used to hide dropdown menu when there a click elsewhere
        window.onclick = function (event) {
            if (!event.target.matches('.dropdownActuator')) {
                var dropdowns = document.getElementsByClassName("dropContent");
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        };

        /*==========================================================================================*/
        /*                                      CORE BEHAVIOUR                                      */
        /*==========================================================================================*/

        // Using JQuery, disable default right-click behaviour in D3 div (removes context-menu inside that div)
        $("#d3-visualisation").bind('contextmenu', function (e) {
            return false;
        });

        // Loading initial sample dataset
        loadDataset("SimpleDemo");

        /*==========================================================================================*/
        /*                                     D3 VISUALIZATION                                     */
        /*==========================================================================================*/

        function setupGraph(filename) {

            var filepath = "/json/" + filename + ".json";

            linkedByIndex = {};
            superNodesIndexes = [];
            childrenNodesIndexes = [];

            d3.select("svg").remove();
            d3.json(filepath, function (error, data) {
                if (error) throw error;

                svg = d3.select("#d3-visualisation")
                //.attr("tabindex", 1)
                        .on("keydown.brush", keydown)
                        .on("keyup.brush", keyup)
                        .each(function() { this.focus(); })
                        .append("svg")
                        .attr("width", width)
                        .attr("height", height)
                        .attr("viewBox", "0 0 " + width + " " + height)
                        .attr("preserveAspectRatio", "xMidYMid meet")
                        .classed("svg-content", true)
                        .call(d3.behavior.zoom().on("zoom", function() {
                            svg.attr("transform", "translate(" + d3.event.translate + ")" + " scale(" + d3.event.scale + ")")
                        }))
                        .on("mousedown.zoom", null)
                        //.on("touchstart.zoom", null)
                        //.on("touchmove.zoom", null)
                        //.on("touchend.zoom", null)
                        .append("g");

                brush = svg.append("g")
                        .datum(function () {
                            return {selected: false, previouslySelected: false};
                        })
                        .attr("class", "brush");

                brush.call(d3.svg.brush()
                        .x(d3.scale.identity().domain([0, width]))
                        .y(d3.scale.identity().domain([0, height]))
                        .on("brushstart", brushStartFunction)
                        .on("brush", brushFunction)
                        .on("brushend", brushEndFunction)
                );

                nodes = createNodeHierarchy(data);

                force = d3.layout.force()
                        .nodes(nodes)
                        .charge(-300)
                        //.charge(-3000)
                        //.friction(0.6)
                        //.gravity(0.6)
                        .linkDistance(linkDistance)
                        .size([width, height])
                        .on("tick", tick);

                data.links.forEach(function (link) {
                    var source = findNode(force.nodes(), link.source);
                    var target = findNode(force.nodes(), link.target);

                    if (source !== null && target != null) {
                        force.links().push({
                            "source": source["object"],
                            "target": target["object"]
                        });
                        linkedByIndex[source["index"] + "," + target["index"]] = true;
                    } else if(Number.isInteger(link.source) && Number.isInteger(link.target)) {
                        force.links().push({
                            "source": link.source,
                            "target": link.target
                        });
                        linkedByIndex[link.source + "," + link.target] = true;
                    }
                });

                force.start();

                svg
                        .append("svg:defs")
                        .selectAll("marker")
                        .data(["end"])
                        .enter().append("svg:marker")
                        .attr("id", String)
                        .attr("viewBox", "0 -5 10 10")
                        .attr("refX", 15)
                        .attr("refY", -1.5)
                        .attr("markerWidth", 6)
                        .attr("markerHeight", 6)
                        .attr("orient", "auto")
                        .append("svg:path")
                        .attr("d", "M0,-5L10,0L0,5");

                path = svg.append("svg:g")
                        .selectAll("path")
                        .data(force.links())
                        .enter().append("svg:path")
                        .attr("class", "link")
                        .attr("marker-end", "url()");

                node = svg.selectAll(".node")
                        .data(force.nodes())
                        .enter().append("g")
                        .attr("class", "node")
                        .attr("id", function(d) { return d.name; })
                        .call(force.drag);

                node
                        .append("circle")
                        .attr("r", node_radius)
                        .on("click", click)
                        .on("mouseover", mouseOverFunction)
                        .on("mouseout", mouseOutFunction)
                        .on("mousedown", mouseDownFunction)
                        .on("mouseup", mouseUpFunction)
                        .call(d3.behavior.drag()
                                .on("dragstart", dragStartFunction)
                                .on("drag", dragFunction)
                                .on("dragend", dragEndFunction)
                        );

                node
                        .append("text")
                        .attr("x", 12)
                        .attr("dy", ".35em")
                        .text(function (d) {
                            return d.name;
                        });

                // Export it using console command 'node index.js > out.svg'
                if (typeof module !== 'undefined' && module.exports) {
                    module.exports = svg;
                }
            });
        }

        /*==========================================================================================*/
        /*                                       D3 META-GRAPHS                                     */
        /*==========================================================================================*/

        //takes JSON nodes gives (D3 group nodes + D3 standard nodes)
        function createNodeHierarchy(data) {
            var nodeHierarchy = data.nodes.slice(0);
            for(var i=0; i < nodeHierarchy.length; i++) {
                var currentNode = nodeHierarchy[i];
                if ((groupId = currentNode['group']) !== undefined) {

                    var parentNode = findNode(nodeHierarchy, 'Group n¬∞' + groupId);
                    if (!parentNode) {
                        var length = nodeHierarchy.push({'name': 'Group n¬∞' + groupId, 'collapsed': false, class:"test", 'children': []});
                        parentNode = [];
                        parentNode["index"] = length - 1;
                        parentNode["object"] = nodeHierarchy[length - 1];
                        superNodesIndexes.push(length - 1);
                    }

                    childrenNodesIndexes.push(i);
                    parentNode["object"]['children'].push(currentNode);
                    currentNode["parent"] = parentNode["object"];

                    if(currentNode.hasOwnProperty("name")) {
                        data.links.push({
                            "source": parentNode["object"]["name"],
                            "target": currentNode["name"]
                        });
                    } else if (currentNode.hasOwnProperty("id")) {
                        data.links.push({
                            "source": parentNode["object"]["id"],
                            "target": currentNode["id"]
                        });
                    } else {
                        data.links.push({
                            "source": parentNode["index"],
                            "target": i
                        });
                    }
                }
            }
            return nodeHierarchy;
        }

        function click(d) {
            if(d.children) {
                d.collapsed = !d.collapsed;

                var visibility = d.collapsed ? "none" : "initial";

                d.children.forEach(function (childNode) {
                    var id = childNode.name;
                    d3.select('#' + id.replace(".", "\\.")).transition(200).style("display", visibility);
                });

                path
                    .transition(200)
                    .style("display", function (o) {
                        var hidden = false;
                        if(inArray(o.source.index, childrenNodesIndexes)) {
                            hidden = hidden || (o.source["parent"]["collapsed"] === true);
                        }

                        if (inArray(o.target.index, childrenNodesIndexes)) {
                            hidden = hidden || (o.target["parent"]["collapsed"] === true);
                        }

                        return hidden ? "none" : "initial";
                    });

                force.start();
            }
        }

        /*==========================================================================================*/
        /*                                   CUSTOMIZATION SLIDERS                                  */
        /*==========================================================================================*/

        $("div.tabMenu>div.list-group>a").click(function (e) {
            e.preventDefault();
            $(this).siblings('a.active').removeClass("active");
            $(this).addClass("active");
            var index = $(this).index();
            var tabContent = $("div.customTab>div.tabContent");
            tabContent.removeClass("active");
            tabContent.eq(index).addClass("active");
        });

        function updateSliderHandle(slider, value) {
            $(slider).find("a").html('<label><span class="glyphicon glyphicon-chevron-left"></span> ' + value + ' <span class="glyphicon glyphicon-chevron-right"></span></label>');
        }

        var slider_nodeSize = $("#nodeSize");
        var slider_edgeLength = $("#edgeLength");
        var slider_edgeStrength = $("#edgeStrength");
        var slider_forceCharge = $("#forceCharge");

        slider_nodeSize.slider({
            animate: true,
            value: 1,
            min: 0.1,
            max: 10,
            step: 0.1,
            slide: function (event, ui) {
                updateSliderHandle(this, ui.value);
                radiusMultiplier = ui.value;
                d3.select("#d3-visualisation").selectAll("circle").transition().attr("r", node_radius);
                /*d3.select("#d3-visualisation").selectAll("text").attr("transform", function (d) {
                 console.log("Translating : ", d.x * radiusMultiplier, " & ", d.y * radiusMultiplier);
                 return "translate(" + d.x + radiusMultiplier + "," + d.y * radiusMultiplier + ")";
                 });*/
                force.start();
            }
        });

        slider_edgeLength.slider({
            animate: true,
            value: 60,
            min: 1,
            max: 500,
            step: 1,
            slide: function (event, ui) {
                updateSliderHandle(this, ui.value);
                linkDistance = ui.value;
                force.linkDistance(linkDistance);
                force.start();
            }
        });

        slider_edgeStrength.slider({
            animate: true,
            value: 1,
            min: 0,
            max: 1,
            step: 0.05,
            slide: function (event, ui) {
                updateSliderHandle(this, ui.value);
                linkStrength = ui.value;
                force.linkStrength(linkStrength);
                force.start();
            }
        });

        slider_forceCharge.slider({
            animate: true,
            value: -300,
            min: -500,
            max: 500,
            step: 1,
            slide: function (event, ui) {
                updateSliderHandle(this, ui.value);
                forceCharge = ui.value;
                force.charge(forceCharge);
                force.start();
            }
        });

        updateSliderHandle(slider_nodeSize, radiusMultiplier);
        updateSliderHandle(slider_edgeLength, linkDistance);
        updateSliderHandle(slider_edgeStrength, linkStrength);
        updateSliderHandle(slider_forceCharge, forceCharge);

        /*==========================================================================================*/
        /*                                     DYNAMIC D3 SIZING                                    */
        /*==========================================================================================*/

        function toggleSettings() {
            $("#customizationMenu").fadeToggle();
        }